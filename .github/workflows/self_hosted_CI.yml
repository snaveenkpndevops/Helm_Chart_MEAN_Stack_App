name: Helm CI/CD Automation

on:
  workflow_dispatch:     # This line makes the workflow run only when user's manual trigger (eliminates automatic trigger on push)
    inputs:
      update_chart_version:
        description: 'Do you want to update the chart version? (yes/no)'
        required: true
        default: 'no'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BUILD_ID: ${{ github.run_id }}
  FRONTEND_IMAGE: "snaveenkpn/restaurant-frontend"

jobs:
  build-and-deploy:
    runs-on: self-hosted           # Self-hosted runner tag

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # # Step 2: Docker debug login  
    # - name: Debug Docker Login Environment Variables
    #   run: |
    #     echo "DOCKER_USERNAME=$env:DOCKER_USERNAME"
    #     echo "DOCKER_PASSWORD is set"
    #   shell: powershell


    # Step 2: Docker login    #// We already login to dockerhub manually in our local machine. so skip this step
    - name: Docker Login
      run: |
        docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD
      shell: powershell

    # Step 3: Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.BUILD_ID }} ./frontend
      shell: powershell  



    # Step 4: Push Docker image to DockerHub
    - name: Push Docker Image
      run: |
        docker push ${{ env.FRONTEND_IMAGE }}:${{ env.BUILD_ID }}
      shell: powershell  

    # Step 5: Update `values.yaml` and `Chart.yaml` with new image tag
    - name: Update Helm Chart Image Tag
      run: |
        sed -i 's/tag: ".*"/tag: "${BUILD_ID}"/' ./helm/frontend-chart/values.yaml
        sed -i 's/appVersion: ".*"/appVersion: "${BUILD_ID}"/' ./helm/frontend-chart/Chart.yaml

    # Step 6: Update Chart Version
    - name: Update Chart Version
      if: ${{ github.event.inputs.update_chart_version == 'yes' }}
      run: |
        # Read the current version from Chart.yaml
        $current_version = (Select-String -Path "./helm/frontend-chart/Chart.yaml" -Pattern "^version:" | ForEach-Object { $_.Line.Split(':')[1].Trim() })

        # Extract major, minor, and patch versions
        $major_version, $minor_version, $patch_version = $current_version -split '\.'

        # Increment the minor version and reset the patch version
        $new_version = "$major_version.$($minor_version + 1).0"

        # Update the version in Chart.yaml
        (Get-Content "./helm/frontend-chart/Chart.yaml") -replace "^version:.*", "version: $new_version" | Set-Content "./helm/frontend-chart/Chart.yaml"
      shell: powershell
      env:
        BUILD_ID: ${{ env.BUILD_ID }}

    # Step 7: Package Helm Chart
    - name: Package Helm Chart
      run: |
        helm package ./helm/frontend-chart -d ./helm/output

    # Step 8: Update Index.yaml
    - name: Update Helm Repo Index
      run: |
        # PowerShell script to replace $BUILD_ID in index.yaml
        (Get-Content ./helm/output/index.yaml) -replace '\$BUILD_ID', $env:BUILD_ID | Set-Content ./helm/output/index.yaml

        # Debugging the file content to ensure the replacement happened
        Get-Content ./helm/output/index.yaml

        # Update the Helm repo index
        helm repo index ./helm/output --url https://snaveenkpn.github.io/Helm_Chart_MEAN_Stack_App
      shell: powershell

    # Step 9: Commit Changes
    - name: Commit and Push Changes
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add .
        git commit -m "Updated Helm Chart with Build ID ${BUILD_ID}"
        git push
