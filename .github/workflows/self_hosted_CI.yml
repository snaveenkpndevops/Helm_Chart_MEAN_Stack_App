name: Helm CI/CD Automation

on:
  workflow_dispatch:   # This line makes the workflow run only when user's manual trigger (eliminates automatic trigger on push)    
    inputs:
      update_chart_version:
        description: 'Do you want to update the chart version? (yes/no)'
        required: true
        default: 'no'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BUILD_ID: ${{ github.run_id }}
  FRONTEND_IMAGE: "snaveenkpn/restaurant-frontend"

jobs:
  build-and-deploy:
    runs-on: self-hosted           # Self-hosted runner tag

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Docker login    #// We already login to dockerhub manually in our local machine. so skip this step
    - name: Docker Login
      run: |
        docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
      shell: powershell

    # Step 3: Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.BUILD_ID }} -t ${{ env.FRONTEND_IMAGE }}:latest ./frontend
      shell: powershell  

    # Step 4: Push Docker image to DockerHub
    - name: Push Docker Image
      run: |
        docker push ${{ env.FRONTEND_IMAGE }}:${{ env.BUILD_ID }}    # Staging Environment: You may deploy a specific tagged version, e.g., frontend:12345.
        docker push ${{ env.FRONTEND_IMAGE }}:latest                 # Development or Testing Environment: Developers might prefer using frontend:latest for ease of testing the most recent image.
      shell: powershell  

    # Step 5: Update `values.yaml` and `Chart.yaml` with new image tag
    - name: Update Helm Chart Image Tag
      run: |
        (Get-Content ./helm/frontend-chart/values.yaml) -replace 'tag:.*', "tag: '${{ env.BUILD_ID }}'" | Set-Content ./helm/frontend-chart/values.yaml
        (Get-Content ./helm/frontend-chart/Chart.yaml) -replace 'appVersion:.*', "appVersion: '${{ env.BUILD_ID }}'" | Set-Content ./helm/frontend-chart/Chart.yaml
      shell: powershell

    # Step 6: Update Chart Version
    - name: Update Chart Version
      if: ${{ github.event.inputs.update_chart_version == 'yes' }}
      run: |
        $chart_yaml = Get-Content "./helm/frontend-chart/Chart.yaml"
        $current_version = ($chart_yaml | Select-String -Pattern "^version:" | ForEach-Object { $_.Line.Split(':')[1].Trim() })
        $major, $minor, $patch = $current_version -split '\.'
        $new_version = "$major.$($minor + 1).0"
        $chart_yaml -replace "^version:.*", "version: $new_version" | Set-Content "./helm/frontend-chart/Chart.yaml"
      shell: powershell

    # Step 7: Validate Helm Chart
    - name: Lint Helm Chart
      run: |
        helm lint ./helm/frontend-chart
      shell: powershell

    # Step 8: Package Helm Chart
    - name: Package Helm Chart
      run: |
        helm package ./helm/frontend-chart -d ./helm/output
      shell: powershell

    # Step 9: Update Index.yaml
    - name: Update Helm Repo Index
      run: |
        if (!(Test-Path -Path ./helm/output/index.yaml)) {
          echo "index.yaml not found. Creating a new index.yaml file."
          helm repo index ./helm/output --url https://snaveenkpn.github.io/Helm_Chart_MEAN_Stack_App
        }
        (Get-Content ./helm/output/index.yaml) -replace '\$BUILD_ID', '${{ env.BUILD_ID }}' | Set-Content ./helm/output/index.yaml
        Get-Content ./helm/output/index.yaml
        helm repo index ./helm/output --url https://snaveenkpn.github.io/Helm_Chart_MEAN_Stack_App
      shell: powershell

    # # Step 10: Deploy to Staging and Validate
    # - name: Deploy to Staging
    #   run: |
    #     helm upgrade --install frontend ./helm/frontend-chart --namespace staging --set image.tag=${{ env.BUILD_ID }}
    #     kubectl get pods -n staging
    #     kubectl rollout status deployment frontend -n staging
    #   shell: powershell

    # Step 11: Commit and Push Changes
    - name: Commit and Push Changes
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add .
        git commit -m "Updated Helm Chart: appVersion=${{ env.BUILD_ID }}"
        git push
      shell: powershell

    # # Step 12: Send Notifications
    # - name: Notify Slack
    #   if: always()
    #   uses: slackapi/slack-github-action@v1.23.0
    #   with:
    #     payload: |
    #       {
    #         "text": "Helm CI/CD workflow for ${{ github.repository }} has completed with status: ${{ job.status }}."
    #       }
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
