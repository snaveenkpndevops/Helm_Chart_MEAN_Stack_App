name: Helm CI/CD Automation for backend automatically_trigger

on:
  # Un comment the below 3 lines for automatic workflow trigger when there is any update in backend folder.
  # push:
  #   paths:
  #     - 'backend/**'   # This will trigger the workflow for any updates in the backend folder
  workflow_dispatch:   # This line makes the workflow run only when user's manual trigger (eliminates automatic trigger on push)    
    inputs:
      update_chart_version:
        description: 'Do you want to update the chart version? (yes/no)'
        required: true
        default: 'no'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BUILD_ID: ${{ github.run_id }}
  BACKEND_IMAGE: "snaveenkpn/restaurant-backend"

jobs:
  build-and-deploy:
    runs-on: self-hosted           # Self-hosted runner tag

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Docker login    #// We already login to dockerhub manually in our local machine. so skip this step
    - name: Docker Login
      run: |
        docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }}
      shell: powershell

    # Step 3: Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.BACKEND_IMAGE }}:${{ env.BUILD_ID }} -t ${{ env.BACKEND_IMAGE }}:latest ./backend
      shell: powershell  

    # Step 4: Push Docker image to DockerHub
    - name: Push Docker Image
      run: |
        docker push ${{ env.BACKEND_IMAGE }}:${{ env.BUILD_ID }}   # Staging Environment: You may deploy a specific tagged version, e.g., backend:12345.
        docker push ${{ env.BACKEND_IMAGE }}:latest                 # Development or Testing Environment: Developers might prefer using backend:latest for ease of testing the most recent image.
      shell: powershell  

    # Step 5: Update `values.yaml` and `Chart.yaml` with new image tag
    - name: Update Helm Chart Image Tag
      run: |
        (Get-Content ./helm/backend-chart/values.yaml) -replace 'tag:.*', "tag: '${{ env.BUILD_ID }}'" | Set-Content ./helm/backend-chart/values.yaml
        (Get-Content ./helm/backend-chart/Chart.yaml) -replace 'appVersion:.*', "appVersion: '${{ env.BUILD_ID }}'" | Set-Content ./helm/backend-chart/Chart.yaml
      shell: powershell

    # Step 6: Update Chart Version
    - name: Update Chart Version
      if: ${{ github.event.inputs.update_chart_version == 'yes' }}
      run: |
        $chart_yaml = Get-Content "./helm/backend-chart/Chart.yaml"
        $current_version = ($chart_yaml | Select-String -Pattern "^version:" | ForEach-Object { $_.Line.Split(':')[1].Trim() })
        $major, $minor, $patch = $current_version -split '\.'

        # Increment the patch version
        $patch = [int]$patch + 1

        # If patch reaches 10, reset patch to 0 and increment minor version
        if ($patch -ge 10) {
            $patch = 0
            $minor = [int]$minor + 1
        }

        # If minor reaches 10, reset minor to 0 and increment major version
        if ($minor -ge 10) {
            $minor = 0
            $major = [int]$major + 1
        }

        # Construct the new version
        $new_version = "$major.$minor.$patch"

        # Update the Chart.yaml file
        $chart_yaml -replace "^version:.*", "version: $new_version" | Set-Content "./helm/backend-chart/Chart.yaml"


    # Step 7: Lint Helm Chart
    - name: Lint Helm Chart
      run: |
        helm dep update ./helm/backend-chart
        helm lint ./helm/backend-chart
      shell: powershell

    # Step 8: Package Helm Chart
    - name: Package Helm Chart
      run: |
        helm package ./helm/backend-chart -d ./helm/output
      shell: powershell

    # Step 9: Update Index.yaml
    - name: Update Helm Repo Index
      run: |
        $REPO_URL = "https://snaveenkpn.github.io/Helm_Chart_MEAN_Stack_App"
        if (!(Test-Path -Path ./helm/output/index.yaml)) {
          echo "index.yaml not found. Creating a new index.yaml file."
          helm repo index ./helm/output --url $REPO_URL
        }
        (Get-Content ./helm/output/index.yaml) -replace '\$BUILD_ID', '${{ env.BUILD_ID }}' | Set-Content ./helm/output/index.yaml
        helm repo index ./helm/output --url $REPO_URL
      shell: powershell


    # Step 10: create namespace and upgrade Helm chart (Deploy to Staging)
    - name: Deploy backend
      run: |
        # Check if the namespace exists and create it if not
        kubectl get namespace restaurant
        if ($?) {
          echo "Namespace exists"
        } else {
          kubectl create namespace restaurant
        }
        
        # Upgrade or install the Helm chart for backend
        helm upgrade --install backend ./helm/backend-chart --namespace restaurant --set image.tag=${{ env.BUILD_ID }} --atomic
        
        # Wait for the backend deployment to become available
        kubectl wait --for=condition=available --timeout=600s deployment/backend -n restaurant
        
        # Get the pods in the restaurant namespace
        kubectl get pods -n restaurant
        
        # Check the rollout status of the backend deployment
        kubectl rollout status deployment backend -n restaurant
      shell: powershell


    # Step 11: Commit and Push Changes
    - name: Commit and Push Changes
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add .
        git status
        
        # Check for changes and commit them
        $diff = git status --porcelain
        if ($diff) {
          git commit -m "Updated Helm Chart: appVersion=${{ env.BUILD_ID }}"
          git push
        } else {
          Write-Host "No changes to commit"
        }
      shell: powershell


    # # Step 12: Send Notifications
    # - name: Notify Slack
    #   if: always()
    #   uses: slackapi/slack-github-action@v1.23.0
    #   with:
    #     payload: |
    #       {
    #         "text": "Helm CI/CD workflow for ${{ github.repository }} has completed with status: ${{ job.status }}."
    #       }
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
